# generated by datamodel-codegen:
#   filename:  analytics.yaml
#   timestamp: 2025-07-30T20:13:54+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class Summary(BaseModel):
    ad_mode_begin: Optional[int] = Field(
        None,
        description="Total ad mode begin events received for all items - note that properties included in the summary vary depending on the dimension(s) and fields requested",
    )
    ad_mode_complete: Optional[int] = Field(
        None,
        description="Total ad mode complete events received for all items - note that properties included in the summary vary depending on the dimension(s) and fields requested",
    )
    active_media: Optional[int] = Field(
        None,
        description="Total active videos in account(s) - note that properties included in the summary vary depending on the dimension(s) and fields requested",
    )
    bytes_delivered: Optional[int] = Field(
        None,
        description="Total bytes of data delivered for all items - note that properties included in the summary vary depending on the dimension(s) and fields requested",
    )
    daily_unique_viewers: Optional[int] = Field(
        None,
        description="Total daily unique viewers for all items - note that properties included in the summary vary depending on the dimension(s) and fields requested",
    )
    drm_bytes_packaged: Optional[float] = Field(
        None,
        description="Total DRM bytes packaged for all items - note that properties included in the summary vary depending on the dimension(s) and fields requested",
    )
    engagement_score: Optional[float] = Field(
        None,
        description="Average engagement score for all items - note that properties included in the summary vary depending on the dimension(s) and fields requested",
    )
    licenses_served: Optional[int] = Field(
        None,
        description="Total DRM licenses serverd for all items - note that properties included in the summary vary depending on the dimension(s) and fields requested",
    )
    live_seconds_streamed: Optional[float] = Field(
        None,
        description="Total second of live video streamed for all items - note that properties included in the summary vary depending on the dimension(s) and fields requested",
    )
    play_rate: Optional[float] = Field(
        None,
        description="Average play rate for all items - note that properties included in the summary vary depending on the dimension(s) and fields requested",
    )
    play_request: Optional[int] = Field(
        None,
        description="Total play requests for all items - note that properties included in the summary vary depending on the dimension(s) and fields requested",
    )
    player_load: Optional[int] = Field(
        None,
        description="Total player loads for all items - note that properties included in the summary vary depending on the dimension(s) and fields requested",
    )
    video_engagement_1: Optional[float] = Field(
        None,
        description="Average views at 1% point for all items - note that properties included in the summary vary depending on the dimension(s) and fields requested",
    )
    video_engagement_25: Optional[float] = Field(
        None,
        description="Average views at 25% point for all items - note that properties included in the summary vary depending on the dimension(s) and fields requested",
    )
    video_engagement_50: Optional[float] = Field(
        None,
        description="Average views at 50% point for all items - note that properties included in the summary vary depending on the dimension(s) and fields requested",
    )
    video_engagement_75: Optional[float] = Field(
        None,
        description="Average views at 75% point for all items - note that properties included in the summary vary depending on the dimension(s) and fields requested",
    )
    video_engagement_100: Optional[float] = Field(
        None,
        description="Average views at 100% point for all items - note that properties included in the summary vary depending on the dimension(s) and fields requested",
    )
    video_impression: Optional[int] = Field(
        None,
        description="Total video impressions for all items - note that properties included in the summary vary depending on the dimension(s) and fields requested",
    )
    video_view: Optional[int] = Field(
        None,
        description="Total video views for all items - note that properties included in the summary vary depending on the dimension(s) and fields requested",
    )


class Timeline(BaseModel):
    type: str = Field(..., description="The type of the timeline array")
    values: List[float] = Field(
        ..., description="Array of views in each 100th part of video duration"
    )


class GetTimeSeriesResponse(BaseModel):
    interval: Optional[List[int]] = Field(
        None,
        description="array containing the start and end points for the interval in the units specified by the `bucket_duration` parameter",
    )
    dimensions: Optional[Dict[str, Any]] = Field(
        None,
        description="A set of dimension/value pairs corresponding to the dimensions specified in the `dimensions` parameter",
    )
    points: Optional[List[Dict[str, Any]]] = Field(
        None,
        description="An array of objects containing metrics for the points in the time-series",
    )


class Datum(BaseModel):
    dimensions: Optional[Dict[str, Any]] = Field(
        None,
        description="Object containing dimension/value that the associated metrics are for",
    )
    totals: Optional[Dict[str, Any]] = Field(
        None,
        description="Object containing metric/value pairs for the associated dimensions",
    )


class GetEventsResponse(BaseModel):
    data: Optional[List[Datum]] = Field(
        None, description="array containing metrics per dimension(s)"
    )


class GetVideoEngagementResponse(BaseModel):
    video_duration: str = Field(..., description="the video duration in seconds")


class Items(BaseModel):
    ad_mode_begin: Optional[int] = Field(
        None, description="number of times a player entered ad mode"
    )
    ad_mode_complete: Optional[int] = Field(
        None, description="number of times a player completed ad mode"
    )
    bytes_delivered: Optional[float] = Field(
        None,
        description="the total bytes of data delivered, including the videos, other assets such as images and captions, and (for player reports) the player code - some of the date is obtained from CDNs and may not be available for up to 3 days",
    )
    engagement_score: Optional[float] = Field(
        None, description="the calculated engagement score for the video"
    )
    play_rate: Optional[float] = Field(
        None, description="video views divided by video impressions"
    )
    play_request: Optional[int] = Field(
        None, description="number of play requests received for a video"
    )
    video: Optional[str] = Field(None, description="the video id")
    duration: Optional[str] = Field(
        None,
        description="'the duration of the video in seconds (note that the duration is available only if there is at least one `video_view`)'",
    )
    video_engagement_1: Optional[float] = Field(
        None, description="number of views at the 1% point of the video duration"
    )
    video_engagement_25: Optional[float] = Field(
        None, description="number of views at the 25% point of the video duration"
    )
    video_engagement_50: Optional[float] = Field(
        None, description="number of views at the 50% point of the video duration"
    )
    video_engagement_75: Optional[float] = Field(
        None, description="number of views at the 75% point of the video duration"
    )
    video_engagement_100: Optional[float] = Field(
        None, description="number of views at the 100% point of the video duration"
    )
    video_impression: Optional[int] = Field(
        None, description="number of times the video was loaded in a player"
    )
    name: Optional[str] = Field(None, description="name of the video")
    video_percent_viewed: Optional[float] = Field(
        None, description="average percentage of the video played when viewed"
    )
    video_seconds_viewed: Optional[float] = Field(
        None, description="total seconds of the video viewed"
    )
    video_view: Optional[int] = Field(
        None, description="number of times some portion of the video was viewed"
    )


class LiveDimensions(Enum):
    video = "video"
    video_country = "video,country"
    video__device_type = "video, device_type"


class GetAvailableDateRangeResponse(BaseModel):
    reconciled_from: str = Field(
        ...,
        description="the earliest date that you can use for from and get reconciled data",
    )
    reconciled_to: str = Field(
        ...,
        description="'the latest date that you can use for to and get reconciled data (realtime data may be available for later dates)'",
    )


class GetAlltimeVideoViewsResponse(BaseModel):
    alltime_video_views: int = Field(..., description="all-time video views")


class Dimensions(Enum):
    account = "account"
    city = "city"
    country = "country"
    region = "region"
    date = "date"
    date_time = "date-time"
    device_os = "device_os"
    device_type = "device_type"
    player = "player"
    referrer_domain = "referrer_domain"
    destination_domain = "destination_domain"
    search_terms = "search_terms"
    social_platform = "social_platform"
    source_type = "source_type"
    video = "video"


class Where(Enum):
    account = "account"
    city = "city"
    country = "country"
    region = "region"
    date = "date"
    date_time = "date-time"
    device_os = "device_os"
    device_type = "device_type"
    player = "player"
    referrer_domain = "referrer_domain"
    destination_domain = "destination_domain"
    search_terms = "search_terms"
    social_platform = "social_platform"
    source_type = "source_type"
    video = "video"


class LiveWhere(Enum):
    country = "country"
    device_type = "device_type"
    video = "video"


class Format(Enum):
    csv = "csv"
    json = "json"
    xlxs = "xlxs"


class GetAnalyticsReportResponse(BaseModel):
    account: str = Field(..., description="the Video Cloud account id")
    item_count: int = Field(
        ..., description="the total number of items matching the request"
    )
    items: List[Items] = Field(
        ..., description="array of analytics objects for the videos returned"
    )
    summary: Summary
    video_engagement_1: float = Field(
        ...,
        description="number of views at the 1% point of the video duration for all videos",
    )
    video_engagement_25: float = Field(
        ...,
        description="number of views at the 25% point of the video duration for all videos",
    )
    video_engagement_50: float = Field(
        ...,
        description="number of views at the 50% point of the video duration for all videos",
    )
    video_engagement_75: float = Field(
        ...,
        description="number of views at the 75% point of the video duration for all videos",
    )
    video_engagement_100: float = Field(
        ...,
        description="number of views at the 100% point of the video duration for all videos",
    )
